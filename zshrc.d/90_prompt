autoload promptinit
promptinit

setopt prompt_subst

autoload -Uz vcs_info
if vcs_info 2> /dev/null; then
    zstyle ':vcs_info:*' enable git
    zstyle ':vcs_info:git*:*' get-revision true
    zstyle ':vcs_info:git*:*' check-for-changes true

    zstyle ':vcs_info:*' actionformats "%s%u%c %r/%S:%F{7}%b%F{85}#%0.6i%f:%a"
    zstyle ':vcs_info:*' formats       "%s%u%c %r/%S:%F{7}%b%F{85}#%0.6i%f"
fi

# Called right before a command runs
preexec_prompt () {
    resetpromptcount="0"
    # post-command prompt gets a long time and a short tty
    pstime=" %F{cyan}%*%f"  # for post-command prompt
    psstarttime=$(date +%s)
    lasttime=""
    ODIR="$(pwd)"
}

add-zsh-hook preexec preexec_prompt

# Called right before drawing a prompt.
precmd_prompt () {
    chef_env=$(cat ~/.chef_changer)
    lastexit=$?
    pstime="%F{brgreen}%*%f"
    pspath="%F{green}%~%f"
    pschef="%F{$(hash_color $chef_env)}$chef_env"
    pshost="%F{$(hash_color $(hostname))}%m%f"
    psuser="%F{red}%n"

    if [[ $lastexit -eq 0 ]]; then
        psat="%F{2}@%f"
    else
        psat="%F{9}$lastexit@%f"
    fi

    # If the last command took longer than some time to run, say so.
    if [ -n "$psstarttime" ] ; then
        exectimeraw=$(($(date +%s)-$psstarttime))
        if [ $exectimeraw -gt 30 ] ; then
            if [ $exectimeraw -lt 100 ] ; then
                lasttime="${exectimeraw}s"
            else
                execmin=$(($exectimeraw/60))
                execsec=$(($exectimeraw%60))
                if [ $execmin -lt 100 ] ; then
                    lasttime="${execmin}m${execsec}s"
                else
                    exechr=$(($execmin/60))
                    execmin=$(($execmin%60))
                    lasttime="${exechr}h${execmin}m${execsec}s"
                    if [ $exechr -ge 36 ] ; then
                        execday=$(($exechr/24))
                        exechr=$(($exechr%24))
                        lasttime="${execday}d${exechr}h${execmin}m"
                    fi
                fi
            fi
            echo "Runtime: $lasttime"
        fi
    fi
    psstarttime=""

    vcs_info
    if [[ -n $vcs_info_msg_0_ ]] ; then
        psvcs=$vcs_info_msg_0_
        # Normal git symbol
        psvcs=$(echo $psvcs | sed -e 's/^git /± /')
        # unstaged git symbol
        psvcs=$(echo $psvcs | sed -e 's/^gitU /%F{red}±%F{blue} /')
        # staged git symbol
        psvcs=$(echo $psvcs | sed -e 's/^gitS /%F{green}±%F{blue} /')
        # staged and unstage git symbol
        psvcs=$(echo $psvcs | sed -e 's/^gitUS /%F{yellow}±%F{blue} /')

        # Get rid of /. on the end.
        psvcs=$(echo $psvcs | sed -e 's_^\([^/]\+\)/\._\1_')
        # don't say master if it is master.
        psvcs=$(echo $psvcs | sed -e 's/:%F{[0-9]\+}master//')
        psvcs="%F{blue}$psvcs%f"
        pspath=""
    else
        psvcs=""
    fi

    if [[ -z $(ssh-add -l) ]]; then
        keychain=" "
    else
        keychain="%F{cyan}⚷%f"
    fi
}

add-zsh-hook precmd precmd_prompt 

periodic_prompt () {
    chef_env=$(cat ~/.chef_changer)
    pschef="%F{$(hash_color $chef_env)}$chef_env"
}
add-zsh-hook periodic periodic_prompt
TMOUT=1
TRAPALRM () {
    precmd_prompt
    zle && zle reset-prompt
}


PROMPT='${psuser}${psat}${pshost}> '
#RPROMPT='${pspath}${psvcs}${keychain}${pstime}'
RPROMPT='${pspath}${psvcs}${pschef}${pstime}'

#EOF vim: ft=zsh
